ENCAPSULAMENTO: agrupamento de comportamento e atributos em um único objeto,
prática de ocultar campos e alguns métodos do acesso publico.
oculta informações ou funcionamento interno de um objeto especifico.

###########################################################################

GETTERS E SETTERS:

um getter é um método em uma classe que recupera o valor de um campo privado e o retorna (geralmente retorna apenas o valor de um campo privado).
É comum nomear um método getter com o prefixo get, seguido pelo nome do campo em letras minusculas.

um setter é um método em uma classe que define o valor de um campo privado. Pode simplesmente atribuir o argumento passado para o método ao campo,
mas pode conter código para validar dados, verificar requisitos de segurança adicionais,
garantir a imutabilidade do valor do campo ou qualquer outro código necessário para proteger e validar o estado de um objeto

o objetivo desses métodos é controlar e proteger o acesso a campos privados

###########################################################################

KEYWORD: "this"

Se refere a instancia que foi criada quando o objeto foi instanciado. portanto,
THIS é um nome de referência especial para o objeto ou instancia, que pode ser usado para descrever a si mesmo. podemos usar THIS para acessar os campos da classe.

diz ao java que queremos atualizar essa variável com o conteúdo do parâmetro que foi passado para esse método.
maneira de atualizar o atributo usando um método em vez de tentar acessa-lo diretamente

###########################################################################

CONSTRUTORES:

public class Account { // essa é uma declaração de classe }
public Account() { // Essa é uma declaração de construtor }

um construtor é usado na criação de um objeto. é um tipo de bloco special que tem um nome e parâmetros especificos, muito parecido com um método.
você nunca inclui um tipo de retorno em um construtor, nem mesmo void. você pode e deve especificar um modificador de
acesso apropriado para controlar quem deve ser capaz de criar novas instâncias da classe usando esse construtor.

Sobrecarga de construtores: declara multiplos construtores com diferentes parametros
Encadeamento de construtores:  ocorre quando um construtor chama explicitamente outro construtor sobrecarregado. você só pode usar o encadeamento com outros construtores

você deve usar o statement "this()" para executar outro construtor e passar os argumentos requiridos

- Umo Objeto pode ser considerado uma instancia
- diferença de variaveis estaticas e instancias estaticas
- todas instancias da classe compartilham a mesma variavel estatica
se forem feitas alterações nessa variavel, todas instancias verão o efeito dessa alteração

variaveis estaticas podem ser usadas para:
-Armazenar contadores
-gerar unique IDs
-armazenar um valor constante que não muda. como PI, por exemplo
-dentro de um método estático não podemos usar a keyword "this"

###########################################################################

POJO:
um objeto java simples e antigo(cujo acrõnimo é POJO) é uma classe que geralmente tem apenas campos de instância.
É usado para armazenar dados e transmitir dados entre classes funcionais.
Normalmente ele não tem outros métodos, ou tem muito poucos além de getters e setters para os campos das instancias
Muitas estrturas de banco de dados usam POJOs para ler dados ou gravar dados de banco de dados, arquivos ou streams

pode ser chamado de bean ou Java bean
javaBean é apenas um POJO com algumas regras extras aplicadas a ele. as vezes o pojo pode ser chamado de entity porque espelha as entidades do banco de dados
outro acrônimo é DTO(Data tranfer object)

no java moderno, o pojo foi substituido pela classe "record", que define as entidades (objetos) direto em seu cabeçalho (parametros), porém o record é imutavel, diferente do pojo tradicional que possui getters e setters para que seus dados possam ser alterados.

###########################################################################

Annotations são um tipo de metadados. Metados são uma maneira de descrever formalmente informações sobre nosso código.
As anotações são mais estruturadas e tem mais significado do que os comentários
@Override: informa ao compliador que esse é um tipo especial de método em Java, um método substituido

###########################################################################

HERANÇA:

O uso de extends especifica a superclase (ou a classe pai) da classe que estamos declarando.

Posso dizer que Cachorro é uma sub class ou classe filha da classe Animal, ou posso dizer que a classe Animal é uma parente da classe Cachorro.

Uma classe pode extender apenas uma classe em sua clausula extends.

###########################################################################

ARRAYS:

uma array é uma estrutura de dados que permite armazenar uma sequencia de valores, todos do mesmo tipo primitivo (int, double, boolean etc)

pode-se usar arrays para aqualquer classe

quando voce declara uma matriz, primeiro especifica o tipo dos elemtnos que deseja na array, depois inclue os colchetes"[]": int[] integerArray;

Array initializer:

Um inicializador de array facilita muito o trabalho de instanciar e inicializar uma matriz. int [] firstFivePositives = new int[] {1,2,3,4,5};

length serve para ver o comrpimento da array. exemplo: firstFivePositives.length

enhanced for loop:

for (declaration -  : colletion) {
	// código
}

declaration: variavel local com o mesmo tipo de um elemento da matriz.
collection: array ou alguma outra variavel de coleção

Arrays.binarySearch

Podemos usar esse método para testar se um valor já está na nossa array, porém tem coisas importas a se lembrar:
- A array precisa ser classificada (sorted)
- Se houver valores duplicados na array, não há garantia de qual deles corresponderá
- Os elementos devem ser comparaveis. A tentativa de comparar instancias de tipos de diferentes resultará em erros e resultados invalidos

- O método binarySearch retorna a posição do valor, se encontrado
- retorna -1 se nenhuma correspondencia é encontrada

###########################################################################

Listas:

Uma lista é um tipo especial em java, chamado interface

- ArrayList é uma classe que mantém uma array na memória que, na verdade, é maior que o necessário na maioria dos casos
- Ela mantém o controle da capacidade ou do tamanho da array na memória, a medida que são adicionados elementos nessa array, ela cresce automaticamente

###########################################################################

Enums:

O tipo enum é o tipo do Java para suportar algo chamado de enumeração.
O Java descreve o tipo enum como: um tipo de dados especial que contém constantes predefinidas
- Uma constante é uma variavel cujo valor não pode ser alterado, uma vez que tenha sido definido

Um enum é um pouco parecido com uma array, exceto pelo fato de que seus elementos são conhecidos. não podem ser alterados, e cada elemento
pode ser referenciado por um nome constante, em vez de uma posição de índice.

public enum DayOfTheWeek {
    SUNDAY, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY
}

- um enum, em sua forma mais simples, é descrito como uma classe. Entretante, a palavra-chave enum substitui a palavra-chave class.
- Você pode nomear o enum com qualquer identificador válido, mas como em uma classe, a preferencia é por letras maiusculas e minusculas
- No corpo do enum, você declara uma lista de identificadores constantes, separados por virgulas. Por convenção, esses rótulos são todos em letras minusculas.
- Um enum é ordenado pela maneira como voce declara as constantes. no exemplo acima, SUNDAY é o primeiro dia da semana e SATURDAY o ultimo

###########################################################################

ABSTRAÇÃO E GENERALIZAÇÃO

usamos os termos de Abstração e Genralização quando começamos a tentar modelar coisas do mundo real no software
Quando você começa a modelar objetos para seu aplicativo, começa identificando quais recursos e comportamentos seus objetos tem em comum.
Genelarizamos quando criamos uma hierarquia de classes.

Parte da generalização é uso da abstração. Você pode generalizar um conjunto ded caracteristicas e comportamentos em um tipo abstrato
Exemplo: Se você considerar um polvo, um cachorro e um pinguim, provavelmente dirá que todos eles são animais

O java oferece suporte a abstração de varias maneiras diferentes. Ele nos permite criar uma hierarquia de classes, em que o topo da hierarquia,
a classe, base, geralmente é um conceito abstrato, seja ele uma classe abstrata ou não
- Java nos permite criar classes abstratas
- Java nos da uma maneira de criar interfaces

A classe abstrata é declarada com o modificador abstract:
abstract class Animal {}

O objetivo de uma classe abstrata é definir o comportamento que suas subclasses devem ter, portanto, ela sempre participa da herança.
